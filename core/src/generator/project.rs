use std::{
    env::{self, current_dir},
    fs::{create_dir_all, File},
    io::Write,
};

use cargo_lock::Lockfile;
use cargo_toml::Manifest;

#[derive(Debug, Copy, Clone)]
/// Logger struct used for Display in the ligen crates
pub struct ProjectGenerator {}

impl ProjectGenerator {
    /// generate function for the ProjectGenerator
    pub fn generate() -> () {
        //TODO: Find a way to fetch the name of the project being built instead of fetching the name from ligen-c-core
        //TODO: Find a way to fetch the version from ligen

        let manifest =
            Manifest::from_path(format!("{}/Cargo.toml", current_dir().unwrap().display()))
                .expect("Failed to parse Cargo.toml");
        let lockfile =
            Lockfile::load(format!("{}/Cargo.lock", current_dir().unwrap().display())).unwrap();

        let ligen_version = match lockfile
            .packages
            .into_iter()
            .find(|package| package.name.as_str() == "ligen-core")
        {
            Some(package) => format!("{}", package.version),
            None => "0.0.0".into(),
        };

        if let Some(package) = manifest.package {
            let name = package.name;

            let include_path = format!("./target/ligen/{}/include/", &name);
            let lib_path = format!("./target/ligen/{}/lib/", &name);
            let cmake_path = format!("./target/ligen/{}/CMakeLists.txt", &name);
            create_dir_all(include_path.as_str()).expect("Failed to create include directory");
            create_dir_all(lib_path.as_str()).expect("Failed to create lib directory");
            let mut file = File::create(cmake_path.as_str()).expect("Failed to create file");

            let cmake_content = format!(
                "# Auto-generated by ligen {}

CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
PROJECT(\"{}\")

IF(TARGET ${{PROJECT_NAME}})
RETURN()
ENDIF()

# INTERFACE is used to create a header-only library.
ADD_LIBRARY(${{PROJECT_NAME}} INTERFACE)
TARGET_INCLUDE_DIRECTORIES(${{PROJECT_NAME}} INTERFACE include)
TARGET_LINK_LIBRARIES(${{PROJECT_NAME}} INTERFACE ${{CMAKE_SOURCE_DIR}}/lib/${{PROJECT_NAME}}.lib)",
                ligen_version, &name
            );

            file.write_all(cmake_content.as_bytes())
                .expect("Failed to write file");
        }
    }
}
